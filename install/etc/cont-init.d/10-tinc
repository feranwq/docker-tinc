#!/usr/bin/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="tinc"

if [ "$SETUP_TYPE" = "AUTO" ]; then
	### Sanity Checks
	sanity_var NETWORK "Network name"
	sanity_var NODE "Node name"
	sanity_var PRIVATE_IP "Private IP"
	sanity_var PUBLIC_IP "Public IP"

	if var_true "${DEBUG_MODE}" ; then
		DEBUG=9
	else
		DEBUG=${DEBUG:-0}
	fi

	if var_true ${ENABLE_GIT} ; then
		### Adjust Runtime Variables for Crontab
		sed -i -e "s#<NETWORK>#${NETWORK}#g" /assets/cron/crontab.txt
		sed -i -e "s#<CRON_PERIOD>#${CRON_PERIOD}#g" /assets/cron/crontab.txt
	else
		rm -rf /assets/cron/crontab.txt
	fi

	### check if network exists
	if [ ! -f /etc/tinc/"${NETWORK}"/tinc.conf ]; then
		print_warn "No Tinc Network Detected.. Installing.."
		mkdir -p /etc/tinc/"${NETWORK}"/
		if var_true "${ENABLE_GIT}" ; then
			sanity_var GIT_USER "Git username"
			sanity_var GIT_PASS "Git password"
			sanity_var GIT_URL "Git URL"
			print_debug "Cloning existing repository from Git"
			git clone https://"$GIT_USER":"$GIT_PASS"@"$GIT_URL" /etc/tinc/"${NETWORK}"/hosts
		else
			mkdir -p /etc/tinc/"${NETWORK}"/hosts
		fi

		if [ -f /etc/tinc/"${NETWORK}"/hosts/"${NODE}" ]; then
			rm -rf /etc/tinc/"${NETWORK}"/hosts/"${NODE}"
		fi

		tinc -n "${NETWORK}" init "${NODE}"

		# Declare public and private IPs in the host file, CONFIG/NET/hosts/HOST
		echo "Address = ${PUBLIC_IP} ${LISTEN_PORT}" >> /etc/tinc/"${NETWORK}"/hosts/"${NODE}"
		echo "Subnet = ${PRIVATE_IP}/32" >> /etc/tinc/"${NETWORK}"/hosts/"${NODE}"
		echo "Cipher = ${CIPHER}" >> /etc/tinc/"${NETWORK}"/hosts/"${NODE}"
		echo "Digest = ${DIGEST}" >> /etc/tinc/"${NETWORK}"/hosts/"${NODE}"
		echo "MACLength = ${MAC_LENGTH}" >> /etc/tinc/"${NETWORK}"/hosts/"${NODE}"
		echo "Compression = ${COMPRESSION}" >> /etc/tinc/"${NETWORK}"/hosts/"${NODE}"

		if var_true "${ENABLE_GIT}" ; then
			cd /etc/tinc/"${NETWORK}"/hosts

			silent git config --global user.email "${NODE}""@docker"
			silent git config --global user.name "${NODE}"

			print_debug "Adding new node to Git"
			silent git add .
			print_debug "Comitting Changes to Git"
			silent git commit -m "${NODE} - Reinitialized $(date +%Y%m%d-%H%M%S)"
			print_debug "Pushing to Git"
			silent git push
		fi
	fi

	# Set Runtime Configuration for Tinc
	echo "Name = ${NODE}" > /etc/tinc/"${NETWORK}"/tinc.conf
	echo "BindToAddress * ${LISTEN_PORT}" >> /etc/tinc/"${NETWORK}"/tinc.conf
	echo "AddressFamily = ipv4" >> /etc/tinc/"${NETWORK}"/tinc.conf
	echo "Device = /dev/net/tun"  >> /etc/tinc/"${NETWORK}"/tinc.conf
	echo "Interface = ${INTERFACE}"  >> /etc/tinc/"${NETWORK}"/tinc.conf

	peers=$(echo "${PEERS}" | tr " " "\n")
	for host in $peers
	do
		echo "ConnectTo = ""$host" >> /etc/tinc/"${NETWORK}"/tinc.conf
	done

	# Edit the tinc-up script
	echo "#!/bin/sh" >/etc/tinc/"${NETWORK}"/tinc-up
	echo "ifconfig ${INTERFACE} ${PRIVATE_IP} netmask 255.255.255.0" >> /etc/tinc/"${NETWORK}"/tinc-up

	echo "#!/bin/sh" > /etc/tinc/"${NETWORK}"/tinc-down
	echo "ifconfig ${INTERFACE} down" >> /etc/tinc/"${NETWORK}"/tinc-down

	### Grab latest hosts entries from Git
	if var_true "${ENABLE_GIT}" ; then
		print_notice "Grabbing latest Hosts from Repository..."
		silent git -C /etc/tinc/"${NETWORK}"/hosts/ pull
	fi

    if var_false "${ENABLE_CONFIG_RELOAD}" ; then
		print_debug "Disabling Configuration Reload functionality"
		rm -rf /etc/services.available/11-config-reload
	fi

    if var_false "${ENABLE_WATCHDOG}" ; then
		print_debug "Disabling Host Watchdog functionality"
		rm -rf /etc/services.available/12-watchdog
	else
		sanity_var WATCHDOG_HOST "Watchdog Hostname or IP Address"
	fi

	chmod 600 /etc/tinc/${NETWORK}/*.priv
	chmod +x /etc/tinc/${NETWORK}/tinc-up
	chmod +x /etc/tinc/${NETWORK}/tinc-down

	mkdir -p ${LOG_PATH}
fi

liftoff
